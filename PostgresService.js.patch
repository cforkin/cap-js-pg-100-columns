--- node_modules/@cap-js/postgres/lib/PostgresService.js
+++ node_modules/@cap-js/postgres/lib/PostgresService.js
@@ -226,18 +226,27 @@
     SELECT_expand({ SELECT }, sql) {
       if (!SELECT.columns) return sql
       const queryAlias = this.quote(SELECT.from?.as || (SELECT.expand === 'root' && 'root'))
-      const cols = SELECT.columns.map(x => {
-        const name = this.column_name(x)
-        let col = `${this.string(name)},${this.output_converter4(x.element, queryAlias + '.' + this.quote(name))}`
 
-        if (x.SELECT?.count) {
-          // Return both the sub select and the count for @odata.count
-          const qc = cds.ql.clone(x, { columns: [{ func: 'count' }], one: 1, limit: 0, orderBy: 0 })
-          col += `, '${name}@odata.count',${this.expr(qc)}`
-        }
-        return col
-      })
-      let obj = `json_build_object(${cols})`
+      const blockSize = 50;
+      let sep = "";
+      let obj = "";
+      for(let i=0; i < SELECT.columns.length; i+=blockSize) {
+        const chunk = SELECT.columns.slice(i, i + blockSize);
+        const cols = chunk.map(x => {
+          const name = this.column_name(x)
+          let col = `${this.string(name)},${this.output_converter4(x.element, queryAlias + '.' + this.quote(name))}`
+
+          if (x.SELECT?.count) {
+            // Return both the sub select and the count for @odata.count
+            const qc = cds.ql.clone(x, { columns: [{ func: 'count' }], one: 1, limit: 0, orderBy: 0 })
+            col += `, '${name}@odata.count',${this.expr(qc)}`
+          }
+          return col
+        })
+        obj = `${obj}${sep}jsonb_build_object(${cols})`
+        sep = '||'
+      }
+
       return `SELECT ${
         SELECT.one || SELECT.expand === 'root' ? obj : `coalesce(json_agg(${obj}),'[]'::json)`
       } as _json_ FROM (${sql}) as ${queryAlias}`
